#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

template <class T>
class Vec2D
{
    private:
	    T x, y;

    public:
	
	    Vec2D() :x(0), y(0) {}
	    Vec2D(T x, T y) : x(x), y(y) {}
	    Vec2D(const Vec2D& v) : x(v.x), y(v.y) {}
	
	Vec2D& operator=(const Vec2D& v)
    {
		x = v.x;
		y = v.y;
		return *this;
	}
	
	Vec2D operator+(Vec2D& v)
    {
		return Vec2D(x + v.x, y + v.y);
	}
	Vec2D operator-(Vec2D& v)
    {
		return Vec2D(x - v.x, y - v.y);
	}
	
	Vec2D& operator+=(Vec2D& v)
    {
		x += v.x;
		y += v.y;
		return *this;
	}
	Vec2D& operator-=(Vec2D& v)
    {
		x -= v.x;
		y -= v.y;
		return *this;
	}
    Vec2D& operator*=(float v) {
		x *= v;
		y *= v;
		return *this;
	}
			
	void SetX(T x) 
    {
		this->x = x;		
	}	
    void SetY(T y)
    {
        this->y = y;
    }

    T GetX() const 
    {
        return x;
    }

    T GetY() const 
    {
        return x;
    }
	
	Vec2D& Normalize()
    {
		if (GetLength() == 0) return *this;
		*this *= (1.0 / GetLength());
		return *this;
	}	
	
	float GetLength() const
    {
		return std::sqrt(x * x + y * y);
	}	
	
	static float Dot(Vec2D v1, Vec2D v2)
    {
		return v1.x * v2.x + v1.y * v2.y;
	}
	static float Cross(Vec2D v1, Vec2D v2)
     {
		return (v1.x * v2.y) - (v1.y * v2.x);
	}
	
};

static const int MAX_DISTANCE_TO_RESTART_POWER = 1000;
static const int MAX_DISTANCE_TO_ACTIVE_BOOST = 6000;
static const int MAX_ANGLE_TO_ACTIVE_BOOST = 5;
static const int MAX_ANGLE_ISINSIGHTTOCHECKPOINT = 30;
static const int MAX_ANGLE_MANAGE_POWER = 90;
static const int MAX_ANGLE_CHECKDIST = 15;
static const int MAX_DISTANCE_START_DECELARATION = 1600;
static const int MAX_DISTANCE_CLOSERANGE_TO_OPPONENT = 1000;
static const int MAX_DISTANCE_CHECKPOINT_TOSTART_SHIELD = 1800;



static bool IsInAngleRange(const int angle, const int AngleMax)
{
    return (angle < AngleMax && angle > (-1*AngleMax));
}

int main()
{

    // game loop
    while (1) {
        int x;
        int y;
        int nextCheckpointX; // x position of the next check point
        int nextCheckpointY; // y position of the next check point
        int nextCheckpointDist; // distance to the next checkpoint
        int nextCheckpointAngle; // angle between your pod orientation and the direction of the next checkpoint
        cin >> x >> y >> nextCheckpointX >> nextCheckpointY >> nextCheckpointDist >> nextCheckpointAngle; cin.ignore();
        int opponentX;
        int opponentY;        
        cin >> opponentX >> opponentY; cin.ignore();

        
        Vec2D<float> vCheckPointGlobalPosition(static_cast<float>(nextCheckpointX), static_cast<float>(nextCheckpointY));
        Vec2D<float> vPodMainGlobalPosition(static_cast<float>(x), static_cast<float>(y));
        Vec2D<float> vPodOpponentGlobalPosition(static_cast<float>(opponentX), static_cast<float>(opponentY));


        int iPower = 100;  
        bool needShield = false;
        Vec2D<float> vDistanceMainToOpponentPod = vPodOpponentGlobalPosition - vPodMainGlobalPosition;
        Vec2D<float> vDistanceCheckPointToOpponent = vPodOpponentGlobalPosition - vCheckPointGlobalPosition;
        Vec2D<float> vDistanceCheckPointToMainPod = vPodMainGlobalPosition - vCheckPointGlobalPosition;
        Vec2D<float> vDistanceCheckPointToOpponentNormalize = vDistanceCheckPointToOpponent;
        vDistanceCheckPointToOpponentNormalize.Normalize();
        Vec2D<float> vDistanceCheckPointToMainPodNormalize = vDistanceCheckPointToMainPod;
        vDistanceCheckPointToMainPodNormalize.Normalize();
        // Active le shlied quand tu es derriere lui et pres et que tu arrive sur un check point
        
        float dotProd = Vec2D<float>::Dot(vDistanceCheckPointToOpponentNormalize, vDistanceCheckPointToMainPodNormalize);
         cerr << "DISTANCE" << abs(vDistanceMainToOpponentPod.GetLength()) << endl;
        if(abs(vDistanceMainToOpponentPod.GetLength()) < MAX_DISTANCE_CLOSERANGE_TO_OPPONENT)
        {            
            if(nextCheckpointDist < MAX_DISTANCE_CHECKPOINT_TOSTART_SHIELD)
            {
                needShield = true;
            }
            else if( dotProd < 0)
            {
                needShield = true;               
            }            
        }        

        
        if(IsInAngleRange(nextCheckpointAngle, MAX_ANGLE_ISINSIGHTTOCHECKPOINT) == false)
        { // not in good way for the next check point so stop power to abord inertie.
            iPower = 0;            
            if(nextCheckpointDist > MAX_DISTANCE_TO_RESTART_POWER)
            {// In case where the next check point is far, we need to manage power engine to keep a good velocity and manage inertie
                if(IsInAngleRange(nextCheckpointAngle, MAX_ANGLE_MANAGE_POWER) == false )                
                { 
                    if(nextCheckpointAngle != 0) // Abord div by 0 just best pratice because if just before abord this possibility to div by 0
                    {
                        // Power : is comute to lerp with angle to next check point : if it's a big angle we have a little power
                        iPower = (int)(((float)MAX_ANGLE_MANAGE_POWER/(float)nextCheckpointAngle)*100.0f);
                        iPower = min((abs(iPower)), 100);// secu min
                        cerr << "PWER 1" << endl;
                    }
                    else 
                    {
                        cerr << "Div by 0..." << endl;
                    }
                    
                }
                else // Under MAX_ANGLE_MANAGE_POWER 
                {
                    iPower = 100;
                }                
            }
       }       
       else if(IsInAngleRange(nextCheckpointAngle, MAX_ANGLE_CHECKDIST) == true)
       {
            if(nextCheckpointDist < MAX_DISTANCE_START_DECELARATION)
            {
               
                iPower = (int)(((float)nextCheckpointDist/(float)MAX_DISTANCE_START_DECELARATION)*140.0f); 
                iPower = min((abs(iPower)), 100);// secu min
                cerr << "PWER 2" << endl;
                
            }           
       }      
       
       bool canActiveBoost = iPower == 100 && IsInAngleRange(nextCheckpointAngle, MAX_ANGLE_TO_ACTIVE_BOOST) && nextCheckpointDist > MAX_DISTANCE_TO_ACTIVE_BOOST;
       if(canActiveBoost)       
       {
           cout << nextCheckpointX << " " << nextCheckpointY << " BOOST " << nextCheckpointDist << " " << nextCheckpointAngle << " " << vDistanceMainToOpponentPod.GetLength() << endl;                       
       }
       else if (needShield)
       {
            cout << nextCheckpointX << " " << nextCheckpointY << " SHIELD " << nextCheckpointDist << " " << nextCheckpointAngle << " " << vDistanceMainToOpponentPod.GetLength() <<endl;
       }
       else
       {
            cout << nextCheckpointX << " " << nextCheckpointY << " " << iPower << " " << nextCheckpointDist << " " << nextCheckpointAngle << " " << vDistanceMainToOpponentPod.GetLength() <<endl;
       }         
        
       
    }
}
